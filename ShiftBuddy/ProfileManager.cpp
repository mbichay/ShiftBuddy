/* Author: mbichay@github
 *
 * Description: Manages the profile database generated by the configuration scripts.
 * All measurements are translated from metric to imperial units (sorry).
*/

#include <Arduino.h>
#include "ProfileManager.h"

/* Definition for doing easy kilometers per hour to inches per minute onversions */
#define KPH_TO_IPM 656.168

ProfileManager::ProfileManager()
{
}


/* Initializes the ProfileManager database into the first available profile.
 * Returns false if there are no profiles in the manager.
*/
bool ProfileManager::init()
{
  if (PROFILE_COUNT <= 0)
    return false;
  nextProfile();
  return true;
}


/* Switches to the next profile, wraps to the beginning when reaching the end.
 * Returns the name for updating the display.
 */
const String ProfileManager::nextProfile()
{
  ++currentProfile;
  if (currentProfile >= PROFILE_COUNT)
  {
    currentProfile = 0;
  }
  return profileName[currentProfile];
}


/* Model for estimating the gear the vehicle is currently in based on ProfileManager data */
const byte ProfileManager::currentGearModel(int& currentSpeedKPH, int& currentRPM) const
{
  /* If the car is not moving, assume first gear. */
  byte currentGear = 1;
  if (currentRPM > 0 && currentSpeedKPH == 0)
    return currentGear;

  /* (Pi * tireDiameter) / (current speed * curent RPM) */
  /* Calculates the current gear ratio */
  float ratio = ((PI * tireDiameter[currentProfile]) / ((float)currentSpeedKPH * KPH_TO_IPM) * (float)currentRPM);
  
  /* Within some tolerance, look for the gear ratio which matches closest to the current gear ratio and assume that gear */
  float min = abs(ratio - gearRatios[currentProfile][0]);
  float diff;
  for (byte gearIdx = 1; gearIdx < gearCount[currentProfile]; ++gearIdx)
  {
    diff = abs(ratio - gearRatios[currentProfile][gearIdx]);
    if (diff <= min)
    {
      min = diff;
      currentGear = gearIdx+1;
    }
  }
  return currentGear;
}


/* Returns the programmed shift-point associated with that gear. */
const float ProfileManager::getShiftPoint(int& currentSpeedKPH, int& currentRPM) const
{
  return shiftPoints[currentProfile][currentGearModel(currentSpeedKPH, currentRPM)-1] - earlyWarning[currentProfile];
}

